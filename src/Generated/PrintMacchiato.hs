{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintMacchiato.
--   Generated by the BNF converter.

module Generated.PrintMacchiato where

import qualified Generated.AbsMacchiato as AbsMacchiato
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsMacchiato.UIdent where
  prt _ (AbsMacchiato.UIdent i) = doc $ showString $ i

instance Print (AbsMacchiato.Program a) where
  prt i e = case e of
    AbsMacchiato.ProgramS _ fndefs -> prPrec i 0 (concatD [prt 0 fndefs])

instance Print (AbsMacchiato.FnDef a) where
  prt i e = case e of
    AbsMacchiato.FunDef _ type_ uident args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 uident, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsMacchiato.FnDef a] where
  prt = prtList

instance Print (AbsMacchiato.Arg a) where
  prt i e = case e of
    AbsMacchiato.ArgVal _ type_ uident -> prPrec i 0 (concatD [prt 0 type_, prt 0 uident])
    AbsMacchiato.ArgRef _ type_ uident -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&"), prt 0 uident])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsMacchiato.Arg a] where
  prt = prtList

instance Print (AbsMacchiato.Block a) where
  prt i e = case e of
    AbsMacchiato.FunBlock _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [AbsMacchiato.Stmt a] where
  prt = prtList

instance Print (AbsMacchiato.Stmt a) where
  prt i e = case e of
    AbsMacchiato.Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    AbsMacchiato.BStmt _ block -> prPrec i 0 (concatD [prt 0 block])
    AbsMacchiato.FunStmt _ fndef -> prPrec i 0 (concatD [prt 0 fndef])
    AbsMacchiato.Decl _ type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    AbsMacchiato.Ass _ uident expr -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsMacchiato.ArrAss _ uident dimaccs expr -> prPrec i 0 (concatD [prt 0 uident, prt 0 dimaccs, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsMacchiato.Ret _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    AbsMacchiato.Cond _ expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    AbsMacchiato.CondElse _ expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    AbsMacchiato.While _ expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    AbsMacchiato.SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    AbsMacchiato.Print _ printparams -> prPrec i 0 (concatD [doc (showString "print"), prt 0 printparams, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsMacchiato.Item a) where
  prt i e = case e of
    AbsMacchiato.NoInit _ uident -> prPrec i 0 (concatD [prt 0 uident])
    AbsMacchiato.Init _ uident expr -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsMacchiato.Item a] where
  prt = prtList

instance Print (AbsMacchiato.PrintParam a) where
  prt i e = case e of
    AbsMacchiato.FunPrintParam _ expr -> prPrec i 0 (concatD [doc (showString "<<"), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsMacchiato.PrintParam a] where
  prt = prtList

instance Print (AbsMacchiato.Type a) where
  prt i e = case e of
    AbsMacchiato.Int _ -> prPrec i 0 (concatD [doc (showString "int")])
    AbsMacchiato.Str _ -> prPrec i 0 (concatD [doc (showString "string")])
    AbsMacchiato.Bool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsMacchiato.Arr _ type_ dimbras -> prPrec i 0 (concatD [prt 0 type_, prt 0 dimbras])
    AbsMacchiato.Fun _ type_ types -> prPrec i 0 (concatD [prt 0 type_, doc (showString "("), prt 0 types, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsMacchiato.DimBra a) where
  prt i e = case e of
    AbsMacchiato.ModDimBra _ -> prPrec i 0 (concatD [doc (showString "[]")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsMacchiato.DimBra a] where
  prt = prtList

instance Print [AbsMacchiato.Type a] where
  prt = prtList

instance Print (AbsMacchiato.Expr a) where
  prt i e = case e of
    AbsMacchiato.EVar _ uident -> prPrec i 6 (concatD [prt 0 uident])
    AbsMacchiato.ENewArr _ type_ dimaccs dimbras -> prPrec i 6 (concatD [doc (showString "new"), prt 0 type_, prt 0 dimaccs, prt 0 dimbras])
    AbsMacchiato.EArrAcc _ uident dimaccs -> prPrec i 6 (concatD [prt 0 uident, prt 0 dimaccs])
    AbsMacchiato.EKeyWord _ uident keyword -> prPrec i 6 (concatD [prt 0 uident, doc (showString "::"), prt 0 keyword])
    AbsMacchiato.EArrKeyWord _ uident dimaccs keyword -> prPrec i 6 (concatD [prt 0 uident, prt 0 dimaccs, doc (showString "::"), prt 0 keyword])
    AbsMacchiato.ELitInt _ n -> prPrec i 6 (concatD [prt 0 n])
    AbsMacchiato.ELitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    AbsMacchiato.ELitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    AbsMacchiato.EApp _ uident exprs -> prPrec i 6 (concatD [prt 0 uident, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsMacchiato.EString _ str -> prPrec i 6 (concatD [prt 0 str])
    AbsMacchiato.Neg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    AbsMacchiato.Not _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    AbsMacchiato.EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    AbsMacchiato.EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    AbsMacchiato.ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    AbsMacchiato.EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    AbsMacchiato.EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsMacchiato.DimAcc a) where
  prt i e = case e of
    AbsMacchiato.EDimAcc _ expr -> prPrec i 0 (concatD [doc (showString "["), prt 6 expr, doc (showString "]")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsMacchiato.DimAcc a] where
  prt = prtList

instance Print (AbsMacchiato.KeyWord a) where
  prt i e = case e of
    AbsMacchiato.KeyWordLength _ -> prPrec i 0 (concatD [doc (showString "LENGTH")])
    AbsMacchiato.KeyWordMaxVal _ -> prPrec i 0 (concatD [doc (showString "MAX_VAL")])

instance Print [AbsMacchiato.Expr a] where
  prt = prtList

instance Print (AbsMacchiato.AddOp a) where
  prt i e = case e of
    AbsMacchiato.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    AbsMacchiato.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (AbsMacchiato.MulOp a) where
  prt i e = case e of
    AbsMacchiato.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    AbsMacchiato.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    AbsMacchiato.Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (AbsMacchiato.RelOp a) where
  prt i e = case e of
    AbsMacchiato.LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsMacchiato.LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsMacchiato.GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsMacchiato.GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsMacchiato.EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    AbsMacchiato.NE _ -> prPrec i 0 (concatD [doc (showString "!=")])

