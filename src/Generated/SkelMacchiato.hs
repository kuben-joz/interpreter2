-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelMacchiato where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsMacchiato

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transUIdent :: AbsMacchiato.UIdent -> Result
transUIdent x = case x of
  AbsMacchiato.UIdent string -> failure x

transProgram :: Show a => AbsMacchiato.Program' a -> Result
transProgram x = case x of
  AbsMacchiato.ProgramS _ fndefs -> failure x

transFnDef :: Show a => AbsMacchiato.FnDef' a -> Result
transFnDef x = case x of
  AbsMacchiato.FunDef _ type_ uident args block -> failure x

transArg :: Show a => AbsMacchiato.Arg' a -> Result
transArg x = case x of
  AbsMacchiato.ArgVal _ type_ uident -> failure x
  AbsMacchiato.ArgRef _ type_ uident -> failure x

transBlock :: Show a => AbsMacchiato.Block' a -> Result
transBlock x = case x of
  AbsMacchiato.FunBlock _ stmts -> failure x

transStmt :: Show a => AbsMacchiato.Stmt' a -> Result
transStmt x = case x of
  AbsMacchiato.Empty _ -> failure x
  AbsMacchiato.BStmt _ block -> failure x
  AbsMacchiato.FunStmt _ fndef -> failure x
  AbsMacchiato.Decl _ type_ items -> failure x
  AbsMacchiato.Ass _ uident expr -> failure x
  AbsMacchiato.ArrAss _ uident dimaccs expr -> failure x
  AbsMacchiato.Ret _ expr -> failure x
  AbsMacchiato.Cond _ expr stmt -> failure x
  AbsMacchiato.CondElse _ expr stmt1 stmt2 -> failure x
  AbsMacchiato.While _ expr stmt -> failure x
  AbsMacchiato.SExp _ expr -> failure x
  AbsMacchiato.Print _ printparams -> failure x

transItem :: Show a => AbsMacchiato.Item' a -> Result
transItem x = case x of
  AbsMacchiato.NoInit _ uident -> failure x
  AbsMacchiato.Init _ uident expr -> failure x

transPrintParam :: Show a => AbsMacchiato.PrintParam' a -> Result
transPrintParam x = case x of
  AbsMacchiato.FunPrintParam _ expr -> failure x

transType :: Show a => AbsMacchiato.Type' a -> Result
transType x = case x of
  AbsMacchiato.Int _ -> failure x
  AbsMacchiato.Str _ -> failure x
  AbsMacchiato.Bool _ -> failure x
  AbsMacchiato.Arr _ type_ dimbras -> failure x
  AbsMacchiato.Fun _ type_ types -> failure x

transDimBra :: Show a => AbsMacchiato.DimBra' a -> Result
transDimBra x = case x of
  AbsMacchiato.ModDimBra _ -> failure x

transExpr :: Show a => AbsMacchiato.Expr' a -> Result
transExpr x = case x of
  AbsMacchiato.EVar _ uident -> failure x
  AbsMacchiato.ENewArr _ type_ dimaccs dimbras -> failure x
  AbsMacchiato.EArrAcc _ uident dimaccs -> failure x
  AbsMacchiato.EKeyWord _ uident keyword -> failure x
  AbsMacchiato.EArrKeyWord _ uident dimaccs keyword -> failure x
  AbsMacchiato.ELitInt _ integer -> failure x
  AbsMacchiato.ELitTrue _ -> failure x
  AbsMacchiato.ELitFalse _ -> failure x
  AbsMacchiato.EApp _ uident exprs -> failure x
  AbsMacchiato.EString _ string -> failure x
  AbsMacchiato.Neg _ expr -> failure x
  AbsMacchiato.Not _ expr -> failure x
  AbsMacchiato.EMul _ expr1 mulop expr2 -> failure x
  AbsMacchiato.EAdd _ expr1 addop expr2 -> failure x
  AbsMacchiato.ERel _ expr1 relop expr2 -> failure x
  AbsMacchiato.EAnd _ expr1 expr2 -> failure x
  AbsMacchiato.EOr _ expr1 expr2 -> failure x

transDimAcc :: Show a => AbsMacchiato.DimAcc' a -> Result
transDimAcc x = case x of
  AbsMacchiato.EDimAcc _ expr -> failure x

transKeyWord :: Show a => AbsMacchiato.KeyWord' a -> Result
transKeyWord x = case x of
  AbsMacchiato.KeyWordLength _ -> failure x
  AbsMacchiato.KeyWordMaxVal _ -> failure x

transAddOp :: Show a => AbsMacchiato.AddOp' a -> Result
transAddOp x = case x of
  AbsMacchiato.Plus _ -> failure x
  AbsMacchiato.Minus _ -> failure x

transMulOp :: Show a => AbsMacchiato.MulOp' a -> Result
transMulOp x = case x of
  AbsMacchiato.Times _ -> failure x
  AbsMacchiato.Div _ -> failure x
  AbsMacchiato.Mod _ -> failure x

transRelOp :: Show a => AbsMacchiato.RelOp' a -> Result
transRelOp x = case x of
  AbsMacchiato.LTH _ -> failure x
  AbsMacchiato.LE _ -> failure x
  AbsMacchiato.GTH _ -> failure x
  AbsMacchiato.GE _ -> failure x
  AbsMacchiato.EQU _ -> failure x
  AbsMacchiato.NE _ -> failure x
